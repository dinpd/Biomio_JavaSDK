package biomio.sdk;

import biomio.sdk.internal.network.AbstractSocketCallManager;

/**
 * Listener which should be implemented by client in order to receive
 * results of Sdk actions
 */
public interface OnBiomioSdkListener {

    /**
     * Callback which notifies about disconnected event
     */
    void onDisconnected();

    /**
     * Callback which notifies about connecting event
     */
    void onConnecting();

    /**
     * Callback which notifies about connected event
     *
     * @param callManager - Instance of {@link AbstractSocketCallManager} responsible for interactions with SDK
     *                    see {@link AbstractSocketCallManager}
     */
    void onConnected(AbstractSocketCallManager callManager);

    /**
     * Callback which notifies about registration success event.
     *
     * @param connectionTtl - connection duration
     * @param sessionTtl    - session duration
     * @param refreshToken  - refresh token
     * @param privateKey    - RSA private key
     * @param fingerPrint   - fingerprint
     */
    void onRegistrationHello(int connectionTtl, int sessionTtl, String refreshToken, String privateKey, String fingerPrint);

    /**
     * Callback which notifies about regular (registered user's session) handshake
     *
     * @param connectionTtl   - connection duration
     * @param sessionTtl      - session duration
     * @param refreshToken    - refresh token
     * @param fingerPrint     - fingerprint
     * @param headerForDigest - signed with RSA private key header generated by client
     * @param callManager     - Instance of {@link AbstractSocketCallManager} responsible for interactions with SDK
     *                        see {@link AbstractSocketCallManager}
     */
    void onRegularHello(int connectionTtl, int sessionTtl, String refreshToken, String fingerPrint, String headerForDigest, AbstractSocketCallManager callManager);

    /**
     * Callback which notifies that Server gate requires resources available on client side
     *
     * @param callManager - Instance of {@link AbstractSocketCallManager} responsible for interactions with SDK see {@link AbstractSocketCallManager}
     */
    void onResources(AbstractSocketCallManager callManager);

    /**
     * Callback which notifies about Auth event by passing server response String with required Auth types
     *
     * @param response    - String JSON response
     * @param callManager - Instance of {@link AbstractSocketCallManager} responsible for interactions with SDK see {@link AbstractSocketCallManager}
     */
    void onTry(String response, AbstractSocketCallManager callManager);

    /**
     * Callback which notifies about Auth result
     *
     * @param status - JSON String
     */
    void onProbeStatus(String status);

    /**
     * Callback responsible for error notifications
     *
     * @param cause - String description of error cause
     */
    void onError(String cause);

    /**
     * Callback responsible for error notifications
     *
     * @param status - "
     */
    void onResponseStatus(String status);

    /**
     * Callback which returns logs to client
     *
     * @param log  - Log String
     * @param send - true if ping, false if pong
     */
    void onLog(String log, boolean send);

}
